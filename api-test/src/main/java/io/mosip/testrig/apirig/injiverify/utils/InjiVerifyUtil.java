package io.mosip.testrig.apirig.injiverify.utils;

import static io.restassured.RestAssured.given;

import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.testng.SkipException;

import com.auth0.jwt.JWT;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import io.mosip.testrig.apirig.dto.TestCaseDTO;
import io.mosip.testrig.apirig.utils.AdminTestUtil;
import io.mosip.testrig.apirig.utils.CertsUtil;
import io.mosip.testrig.apirig.utils.ConfigManager;
import io.mosip.testrig.apirig.utils.GlobalConstants;
import io.mosip.testrig.apirig.utils.GlobalMethods;
import io.mosip.testrig.apirig.utils.RestClient;
import io.mosip.testrig.apirig.utils.SkipTestCaseHandler;
import io.restassured.RestAssured;
import io.restassured.config.EncoderConfig;
import io.restassured.config.HttpClientConfig;
import io.restassured.config.RestAssuredConfig;
import io.restassured.response.Response;

public class InjiVerifyUtil extends AdminTestUtil {

	private static final Logger logger = Logger.getLogger(InjiVerifyUtil.class);
	public static final String injiVerifyBaseUrl = InjiVerifyConfigManager
			.getproperty(InjiVerifyConstants.INJI_VERIFY_BASE_URL);
	public static List<String> testCasesInRunScope = new ArrayList<>();

	public static String isTestCaseValidForExecution(TestCaseDTO testCaseDTO) {
		String testCaseName = testCaseDTO.getTestCaseName();
		currentTestCaseName = testCaseName;

		int indexof = testCaseName.indexOf("_");
		String modifiedTestCaseName = testCaseName.substring(indexof + 1);

		addTestCaseDetailsToMap(modifiedTestCaseName, testCaseDTO.getUniqueIdentifier());
		
		if (!testCasesInRunScope.isEmpty()
				&& testCasesInRunScope.contains(testCaseDTO.getUniqueIdentifier()) == false) {
			throw new SkipException(GlobalConstants.NOT_IN_RUN_SCOPE_MESSAGE);
		}

		if (SkipTestCaseHandler.isTestCaseInSkippedList(testCaseName)) {
			throw new SkipException(GlobalConstants.KNOWN_ISSUES);
		}

		return testCaseName;
	}

	public String inputJsonModuleKeyWordHandler(String jsonString, String testCaseName) {
		if (jsonString == null) {
			logger.info(" Request Json String is :" + jsonString);
			return jsonString;
		}

		if (jsonString.contains("$PRESENTATIONDEFINITIONID$")) {
			jsonString = replaceKeywordWithValue(jsonString, "$PRESENTATIONDEFINITIONID$",
					InjiVerifyConfigManager.getproperty(InjiVerifyConstants.PRESENTATION_DEFINITION_ID));
		}

		if (jsonString.contains("$INJIVERIFYBASEURL$")) {
			jsonString = replaceKeywordWithValue(jsonString, "$INJIVERIFYBASEURL$",
					InjiVerifyConfigManager.getproperty(InjiVerifyConstants.INJI_VERIFY_BASE_URL));
		}

		return jsonString;

	}
	
	
	// Remove below two methods once after releasing the apitest-commons-1.3.3
	protected Response postWithBodyAndCookieForAutoGeneratedIdForUrlEncoded(String url, String jsonInput,
			String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		ObjectMapper mapper = new ObjectMapper();
		Map<String, String> map = null;
		try {
			map = mapper.readValue(inputJson, Map.class);
			logger.info(GlobalConstants.POST_REQ_URL + url);
			logger.info(inputJson);
			GlobalMethods.reportRequest(null, inputJson, url);
			response = postRequestWithFormDataBody(url, map);
			GlobalMethods.reportResponse(response.getHeaders().asList().toString(), url, response);

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			if (testCaseName.contains("UIN_Cookie") || testCaseName.contains("Vid_Cookie")) {
				String keyName = null;
				if (testCaseName.contains("UIN_Cookie"))
					keyName = ESIGNETUINCOOKIESRESPONSE;
				else
					keyName = ESIGNETVIDCOOKIESRESPONSE;

				CertsUtil.addCertificateToCache(keyName, response.getBody().asString());
			}

			return response;
		} catch (Exception e) {
			logger.error(GlobalConstants.EXCEPTION_STRING_2 + e);
			return response;
		}
	}
	
	public static Response postRequestWithFormDataBody(String url, Map<String, String> formData) {
		RestAssuredConfig config = RestAssured.config().httpClient(HttpClientConfig.httpClientConfig());
		Response postResponse;
		url = GlobalMethods.addToServerEndPointMap(url);

		EncoderConfig encoderConfig = new EncoderConfig().encodeContentTypeAs("application/x-www-form-urlencoded; charset=utf-8",
				io.restassured.http.ContentType.URLENC);
		logger.info("REST-ASSURED: Sending a POST request to " + url);

		if (ConfigManager.IsDebugEnabled()) {
			postResponse = given().config(config.encoderConfig(encoderConfig)).relaxedHTTPSValidation().formParams(formData)
					.contentType("application/x-www-form-urlencoded; charset=utf-8").log().all().when().post(url).then().extract().response();
		} else {
			postResponse = given().config(config.encoderConfig(encoderConfig)).relaxedHTTPSValidation().formParams(formData)
					.contentType("application/x-www-form-urlencoded; charset=utf-8").when().post(url).then().extract().response();
		}

		return postResponse;
	}
	
	
	public static String decodeBase64Url(String encoded) {
        return new String(Base64.getUrlDecoder().decode(encoded));
	}
	
	public static String decodeAndCombineJwt(String jwtString) {
	    try {
	        DecodedJWT jwt = JWT.decode(jwtString);

	        // Base64 decode header & payload
	        String headerJson = decodeBase64Url(jwt.getHeader());
	        String payloadJson = decodeBase64Url(jwt.getPayload());

	        // Use Jackson to combine into single JSON object
	        ObjectMapper mapper = new ObjectMapper();
	        ObjectNode combinedJson = mapper.createObjectNode();

	        combinedJson.set("header", mapper.readTree(headerJson));
	        combinedJson.set("payload", mapper.readTree(payloadJson));

	        // Pretty print final JSON
	        return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(combinedJson);

	    } catch (Exception e) {
	        logger.error("Error decoding JWT: " + e.getMessage(), e);
	        return null;
	    }
	}


}