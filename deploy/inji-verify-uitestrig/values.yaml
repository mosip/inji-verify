## ConfigMap with extra environment variables
##
extraEnvVarsCM:
  - global
  - s3
  - keycloak-host
  - db
  - uitestrig
  - config-server-share

## Secret with extra environment variables
##
extraEnvVarsSecret:
  - s3
  - keycloak-client-secrets
  - postgres-postgresql

modules:
  - name: verifyui
    enabled: true
    image:
      registry: docker.io
      repository: mosipqa/uitest-verify
      tag: 0.15.x

crontime: "0 3 * * *"    ## run cronjob every day at 3 AM (time hr: 0-23 )

uitestrig:
  configmaps:
    s3:
      s3-host: 'http://minio.minio:9000'
      s3-user-key: 'admin'
      s3-region: ''
    db:
      db-port: '5432'
      db-su-user: 'postgres'
      db-server: 'api-internal.sandbox.xyz.net'
    uitestrig:
      apiInternalEndPoint: 'https://api-internal.sandbox.xyz.net'
      apiEnvUser: 'api-internal.sandbox.xyz.net'
      CHROME_DRIVER_CPU_LIMIT: "2"
      CHROME_DRIVER_MEMORY: 3g
      ENV_BROWSERSTACK_CONFIG: androidConfig.yml
      ENV_ENDPOINT: https://api-internal.sandbox.xyz.net
      ENV_TESTLEVEL: smokeAndRegression
      ENV_TESTNG_XML_FILE: androidRegression.xml
      ENV_USER: api-internal.sandbox
      InsuranceUrl: https://registry.sandbox.xyz.net/api/v1/Insurance
      MOSIP_INJIWEB_GOOGLE_REFRESH_TOKEN: $token # pass the google token in the place of $token
      MOSIP_INJIWEB_GOOGLE_CLIENT_ID: $client_id # pass the google client id in the place of $client_id
      MOSIP_INJIWEB_GOOGLE_CLIENT_SECRET: $secret # pass the google client secret in the place of $ $secret
      NS: injiverify-ui-testrig  # provide the namespace
      actuatorMimotoEndpoint: /v1/mimoto/actuator/env
      eSignetbaseurl: https://esignet-mosipid.sandbox.xyz.net
      eSignet_resource_bundle_url: https://github.com/mosip/esignet/blob/v1.5.1/oidc-ui/public/locales/en.json
      injiverify: https://injiverify.sandbox.xyz.net/
      injiweb: https://injiweb.sandbox.xyz.net/issuers
      stayProtectedIssuerCredentialType: Insurance Credential
      mosip.inji.web.url: https://injiweb.sandbox.xyz.net/
      loginlang: sin
      mosip_components_base_urls: auditmanager=api-internal.sandbox.xyz.net;idrepository=api-internal.sandbox.xyz.net;partnermanager=api-internal.sandbox.xyz.net;idauthentication=api-internal.sandbox.xyz.net;policymanager=api-internal.sandbox.xyz.net;authmanager=api-internal.sandbox.xyz.net;resident=api-internal.sandbox.xyz.net;preregistration=api-internal.sandbox.xyz.net;masterdata=api-internal.sandbox.xyz.net;idgenerator=api-internal.sandbox.xyz.net;
      verifyPortalPath: https://injiverify.sandbox.xyz.net
      push-reports-to-s3: 'yes'
      s3-account: uitestrig
      stayProtectedIssuerCredentialType: Insurance Credential
      browserstack_access_key: $accesskey # Create a BrowserStack accesskey as per the README and update the accesskey in place of $accesskey
      browserstack_username: $username # Create a BrowserStack username as per the README and update the username in place of $username
      browserstack_appId: $appid # Create a BrowserStack appid as per the README and update the appid in place of $appid
      browserstack_buildName: sandbox Android Build
      browserstack_deviceName: Google Pixel 7 Pro #Update the device name as per requirement
      browserstack_platformName: Android #Update platform name as  per requirement
      browserstack_platformVersion: '13.0' #Update version as per requirement
    scripts:
      fetch_docker_image_hash_ids.sh: |
        #!/bin/bash
        sleep 5
        export DOCKER_HASH_ID=$( kubectl get pod "$HOSTNAME" -n "$NS" -o jsonpath='{.status.containerStatuses[*].imageID}' | sed 's/ /\n/g' | grep -v 'istio' | sed 's/docker\-pullable\:\/\///g' )
        export DOCKER_IMAGE=$( kubectl get pod "$HOSTNAME" -n "$NS" -o jsonpath='{.status.containerStatuses[*].image}' | sed 's/ /\n/g' | grep -v 'istio' | sed 's/docker\-pullable\:\/\///g' )
        if [[ -z $DOCKER_HASH_ID ]]; then
        echo "DOCKER_HASH_ID IS EMPTY;EXITING";
        exit 1;
        fi
        echo "DOCKER_HASH_ID ; $DOCKER_HASH_ID"
        echo "DOCKER_IMAGE : $DOCKER_IMAGE"
        kubectl get pods -A -o=jsonpath='{range .items[*]}{.metadata.namespace}{","}{.metadata.labels.app\.kubernetes\.io\/name}{","}{.status.containerStatuses[?(@.name!="istio-proxy")].image}{","}{.status.containerStatuses[?(@.name!="istio-proxy")].imageID}{","}{.metadata.creationTimestamp}{"\n"}' | sed 's/ /\n/g' | grep -vE 'istio*|longhorn*|cattle*|rancher|kube' | sed 's/docker\-pullable\:\/\///g' | sort -u | sed '/,,,/d' | awk -F ',' 'BEGIN {print "{ \"POD_NAME\": \"'$(echo $HOSTNAME)'\", \"DOCKER_IMAGE\": \"'$(echo $DOCKER_IMAGE)'\", \"DOCKER_HASH_ID\": \"'$(echo $DOCKER_HASH_ID)'\", \"k8s-cluster-image-list\": ["} {print "{"} {print "\"namespace\": \"" $1 "\","} {print "\"app_name\": \"" $2 "\","} {print "\"docker_image_name\": \"" $3 "\","} {print "\"docker_image_id\": \"" $4 "\","} {print "\"creation_timestamp\": \"" $5 "\"" } {print "},"} END {print "]}"}' | sed -z 's/},\n]/}\n]/g' | jq -r . | tee -a images-list.json
        ## run entrypoint script
        sleep 5
        cd /home/${container_user}/
        bash ./entrypoint.sh
