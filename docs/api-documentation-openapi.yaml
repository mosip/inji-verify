openapi: 3.0.0
servers:
  - url: 'https://injiverify.collab.mosip.net/v1/verify'
tags:
  - name: ./well-known
    description: API for did discovery through ./well-known endpoint
  - name: Presentation Definition Management
    description: APIs for Presentation Definition related operations
  - name: VC Submission
    description: APIs for Verifiable Credential submission related operations
  - name: VC verification API
    description: APIs for Verifiable Credential Verification related operations
  - name: VP Request Management
    description: APIs for Verifiable Presentation Authorization Request related operations
  - name: VP Submission
    description: APIs for Verifiable Presentation submission related operations
info:
  title: OpenID4VP Verifier API - Inji Verify
  version: 1.0.2
  contact:
    name: MOSIP
    url: 'https://mosip.io'
    email: mosip.emailnotifier@gmail.com
  license:
    name: MPL-2.0
    url: 'https://www.mozilla.org/en-US/MPL/2.0/'
  description: API for OpenID4VP verifier supporting direct_post and cross-device flow
paths:
  /vp-request:
    post:
      summary: Create a new verification request
      description: |
        This endpoint is used to initiate a verifiable presentation (VP) request. 
        It's the first step a verifier takes to ask a wallet to present credentials.
        The request body must include a `clientId` and either:
        - A `presentationDefinitionId` (referencing a pre-existing definition), or
        - A full `presentationDefinition` object. 

        The response from this endpoint is used by the UI application to generate a QR code, which the wallet consumes. As of version *0.14.x*, the response will include a mix of `camelCase` and `snake_case` attributes. It is the responsibility of the UI application to convert `snake_case` attributes before generating the QR code.

        The response will contain the Authorization Request in one of two ways:
        - **By value** (the full request object), or
        - **By reference** (`request_uri`).
        - In *0.13.x*, the Authorization Request was always provided by value. In this case, the `clientId` could simply be the clientâ€™s name.
        - From *0.14.x* onward, the endpoint supports Authorization Request by reference (`request_uri`). For this, the `clientId` must be a valid DID URL of the verifier.
      operationId: createVPRequest
      tags:
        - VP Request Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPRequestCreate'
            example:
              clientId: client123
              presentationDefinitionId: age_verification
      responses:
        '201':
          description: 'The VP Request was created successfully. The response includes a transactionId and requestId, along with either the full authorizationDetails or a requestUri.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VPRequestResponse'
                  - $ref: '#/components/schemas/VPRequestResponseByReference'
              examples:
                by_value:
                  summary: 'In this flow the wallet can receive the entire request payload directly.  All necessary authorization details, including the presentation definition, nonce, and responseUri, are provided in a single API response, eliminating the need for the wallet to make a separate call to fetch the request.'
                  value:
                    transactionId: txn_f82f281e-8d96-419b-b413-5a0459739a7b
                    requestId: req_6d538e1b-2615-4927-bfd2-094e9f73f2a1
                    authorizationDetails:
                      responseUri: 'https://injiverify.collab.mosip.net/v1/verify/vp-submission/direct-post'
                      responseType: vp_token
                      responseMode: direct_post
                      clientId: client123
                      nonce: aShdFjAhdSFJlKasdF
                      presentationDefinition:
                        id: age_verification
                        input_descriptors:
                          - id: age_credential
                            format:
                              jwt_vc: {}
                            constraints:
                              fields:
                                - path:
                                    - $.vc.credentialSubject.age
                                  filter:
                                    type: number
                                    minimum: 18
                      iat: 1752838929
                    expiresAt: 1752838929
                by_reference:
                  summary: 'Instead of the full payload, the response provides a `requestUri` which the wallet must resolve to retrieve the authorization details. This keeps the QR code payload small and enables more complex or larger presentation definitions. This feature is available only from Inji Verify 0.14.0'
                  value:
                    transactionId: 'urn:uuid:f82f281e-8d96-419b-b413-5a0459739a7b'
                    requestId: 'urn:uuid:6d538e1b-2615-4927-bfd2-094e9f73f2a1'
                    requestUri: 'https://example.com/vp-requests/6d538e1b-2615-4927-bfd2-094e9f73f2a1'
                    expiresAt: 1752838929
        '400':
          description: The request failed due to an invalid or missing field in the request body.
        '404':
          description: The specified PresentationDefinitionId was not found on the server.
  '/vp-request/{requestId}':
    get:
      summary: Get VP Request JWT
      description: This endpoint allows a client to retrieve the Verifiable Presentation (VP) request in its JSON Web Token (JWT) format. This is particularly useful for cross-device flows where the wallet needs to fetch the request details from a URI. This is introduced in version *0.14.x* to support Authorization Request by reference.
      operationId: getVPRequestJwt
      tags:
        - VP Request Management
      parameters:
        - name: requestId
          description: The Request Id for which you want to retrieve the JWT.
          in: path
          required: true
          schema:
            type: string
          example: req_12345
      responses:
        '200':
          description: The VP Request JWT was successfully retrieved. The response body is the JWT string itself.
          content:
            application/oauth-authz-req+jwt:
              schema:
                type: string
                format: jwt
                example: eyJhbGciOiJFRERTQSIsInR5cCI6Im9hdXRoLWF1dGh6LXJlcStqd3QiLCJraWQiOiJkaWQ6ZXhhbXBsZTppc3N1ZXItZGVmYXVsdC1rZXkifQ.eyJjbGllbnRfaWQiOiJkaWQ6ZXhhbXBsZTpjbGllbnQiLCJpc3MiOiJkaWQ6ZXhhbXBsZTpjbGllbnQiLCJyZXNwb25zZV90eXBlIjoidnBfdG9rZW4iLCJyZXNwb25zZV9tb2RlIjoiZGlyZWN0X3Bvc3QiLCJub25jZSI6ImFzaGRmamFoZHNmbGprYXNkZiIsImV4cCI6MTY3ODkzMDQwMCwiaWF0IjoxNjc4OTI5ODAwfQ.EXAMPLE_EDDSA_SIGNATURE_HERE
        '404':
          description: The specified Request ID does not exist.
  '/vp-request/{requestId}/status':
    get:
      summary: Get VP Request status
      description: 'This endpoint is used to check the current status of a specific VP request transaction. This allows the verifier to monitor whether the request has been fulfilled, is still active, or has expired.'
      operationId: getVPRequestStatus
      tags:
        - VP Request Management
      parameters:
        - name: requestId
          description: The Request Id for which you want to get the status.
          in: path
          required: true
          schema:
            type: string
          example: req_12345
      responses:
        '200':
          description: 'The VP Request status was retrieved successfully. The status can be ''ACTIVE'', ''VP_SUBMITTED'', or ''EXPIRED''.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
              examples:
                active_status:
                  summary: Request is active and awaiting submission
                  value:
                    status: ACTIVE
                submitted_status:
                  summary: A Verifiable Presentation has been submitted
                  value:
                    status: VP_SUBMITTED
                expired_status:
                  summary: Request has expired
                  value:
                    status: EXPIRED
        '404':
          description: The Request ID provided is not associated with a known transaction.
  /vp-submission/direct-post:
    post:
      summary: Submit authorization response
      description: |-
        This endpoint is the destination for a wallet to submit a Verifiable Presentation (VP) `vp_token` and a `presentation_submission` object, typically in a direct post flow. 
        The server processes this VP submission, saves it in database, and updates the transaction status.

        As of release `0.15.0` of this service below changes are made:
        1. new request attributes added for `error` and `error_description` have been added
        1. `vp_token` is allowed as null, provided error is not null
        2. `presentation_submission` is allowed as null, provided error is not null
        3. if `vp_token` is not_null, then `presentation_submission` should be not null
        4. if `error` is not null, then `vp_token` and `presentation_submission` should be null  
        5. if `error` is not null, still `error_description` can be null
         
      operationId: submitResponse
      tags:
        - VP Submission
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthorizationResponse'
            example:
              vp_token: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpGVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhkV1FpT2lKb2RIUndjem92TDNabGNtbG1lUzVrWlhZeExtMXZjMmx3TG01bGRDOXlaWE53YjI1elpYTWlMQ0pqYkdGcGJYTWlPbnNpWVdkbElqb3hPSDBzSW1semN5STZJbWgwZEhCek9pOHZkbVZ5YVdaNUxtUmxkakV1Ylc5emFYQXVibVYwTDJselozSmhiblJsY25NaUxDSnVZbVlpT2pFMk9ESTVOekF3TURBc0ltVjRjQ0k2TVRjd05qazNNREF3TUgwLnNpZ25hdHVyZSJdfSwibm9uY2UiOiJub25jZV8xMjM0NSIsImF1ZCI6ImNsaWVudDEyMyJ9.signature
              state: state_abcde
              presentation_submission:
                id: submission_12345
                definition_id: age_verification_1
                descriptor_map:
                  - id: age_credential
                    format: jwt_vc
                    path: '$.verifiableCredential[0]'
      responses:
        '200':
          description: The response was processed successfully.
        '400':
          description: The submission failed due to an invalid request format or missing required fields.
        '404':
          description: The transaction associated with the provided Request ID was not found.
  /vc-submission:
    post:
      summary: Submit Verifiable Credential (VC)
      description: 'This API allows a user or system to submit a Verifiable Credential to the server. The server can optionally generate a transactionId if one is not provided in the request. This is distinct from a Verifiable Presentation submission and might be used for other purposes, such as VC issuance or general credential management.'
      operationId: submitVC
      tags:
        - VC Submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VCSubmissionRequest'
            example:
              vc:
                '@context':
                  - 'https://www.w3.org/2018/credentials/v1'
                type:
                  - VerifiableCredential
                issuer: 'https://example.org/issuers/123'
                issuanceDate: '2023-01-01T00:00:00Z'
                credentialSubject:
                  id: 'did:example:abc'
                  age: 25
                proof:
                  type: Ed25519Signature2020
                  created: '2023-01-01T00:00:00Z'
                  proofPurpose: assertionMethod
                  verificationMethod: 'https://example.org/keys/1'
                  jws: eyJ...signature
              transactionId: txn_abc123
      responses:
        '200':
          description: The VC submission was accepted successfully. The response includes the transactionId for the submission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSubmissionResponse'
              example:
                transactionId: txn_abc123
        '400':
          description: The VC was not submitted due to a bad request. The request body is malformed or missing the VC object.
  '/vp-result/{transactionId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        description: The Transaction Id for which you want to get the Vp token for.
        in: path
        required: true
    get:
      summary: Get the VP token for a request
      description: 'This endpoint provides the final outcome of a Verifiable Presentation submission. After a wallet has submitted a VP, this endpoint can be polled to get the submission status and the verification results for each credential.'
      tags:
        - VP Request Management
      responses:
        '200':
          description: 'The result of the submission was successfully retrieved. The response includes the overall submissionStatus and an array of vcResults, each detailing the verification status for an individual VC.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpTokenResult'
              examples:
                successful_submission:
                  summary: A successful VP submission result
                  value:
                    transactionId: txn_abc123
                    submissionStatus: SUCCESS
                    vcResults:
                      - vc: '{...}'
                        verificationStatus: SUCCESS
                failed_submission:
                  summary: A failed VP submission result
                  value:
                    transactionId: txn_def456
                    submissionStatus: FAILED
                    vcResults:
                      - vc: '{...}'
                        verificationStatus: INVALID
        '400':
          description: |-
            There was error during VP request processing in the wallet, which is sent to the Verifier.
            The client is expected to use this to display the results of VP request.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: string
                    errorDescription: string
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: The error code sent by the wallet during VP submission
                  errorDescription:
                    type: string
                    description: The optional error message sent by the wallet
        '404':
          description: 'No result was found for the given transaction ID, or the given transaction ID is invalid.'
          content: {}
      operationId: get-vp-result-requestId-presentations
  '/vp-definition/{id}':
    parameters:
      - schema:
          type: string
        name: id
        description: The Presentation Definition Id for which you want to get the Presentation Definition for.
        in: path
        required: true
    get:
      summary: Get presentation definition
      description: 'This API allows a user to fetch a previously stored or referenced presentation definition. A presentation definition outlines the specific data requirements for a VP, such as the required credential types and their constraints.'
      tags:
        - Presentation Definition Management
      responses:
        '200':
          description: The presentation definition was found and is returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationDefinition'
              example:
                id: age_verification_1
                input_descriptors:
                  - id: age_credential
                    format:
                      jwt_vc: {}
                    constraints:
                      fields:
                        - path:
                            - $.vc.credentialSubject.age
                          filter:
                            type: number
                            minimum: 18
        '404':
          description: A presentation definition with the specified ID does not exist.
      operationId: get-presentation-id
  /vc-verification:
    post:
      summary: Get the submitted VC verified
      description: This API performs the server-side verification of a submitted Verifiable Credential to check its integrity and authenticity. It performs checks such as cryptographic signature validation to ensure the VC has not been tampered with.
      operationId: vc-verification
      tags:
        - VC verification API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VCVerificationRequest'
            examples:
              example:
                summary: Example VC to be verified
                value:
                  vc:
                    '@context':
                      - 'https://www.w3.org/2018/credentials/v1'
                    type:
                      - VerifiableCredential
                      - AgeCredential
                    issuer: 'did:web:example.com'
                    issuanceDate: '2023-01-01T00:00:00Z'
                    credentialSubject:
                      id: 'did:example:123'
                      age: 25
                    proof:
                      type: Ed25519Signature2020
                      created: '2023-01-01T00:00:00Z'
                      verificationMethod: 'did:web:example.com#key-1'
                      proofPurpose: assertionMethod
                      jws: eyJhbGciOiJFZERTQSJ9.eyJpYXQiOiIwMjMxMTIzMTIzMTMiLCJ...signature
        description: The Verifiable Credential to be verified.
      responses:
        '200':
          description: 'The VC verification status. The response contains the verificationStatus, which can be ''SUCCESS'' / ''EXPIRED'' / ''INVALID''.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCVerificationResult'
              examples:
                success:
                  summary: A successful verification result
                  value:
                    verificationStatus: SUCCESS
                invalid:
                  summary: An invalid verification result
                  value:
                    verificationStatus: INVALID
        '400':
          description: The request body format is invalid.
  /well-known/did.json:
    post:
      summary: Get the did document
      description: 'This endpoint is part of a standard DID discovery mechanism, following the .well-known pattern. It is used to retrieve a DID (Decentralized Identifier) document for a given DID. A DID document contains crucial information for interacting with a DID, including public keys for authentication and service endpoints. This is introduced in version *0.14.x*.'
      tags:
        - ./well-known
      responses:
        '200':
          description: The DID document was successfully found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDDocument'
              example:
                '@context':
                  - 'https://www.w3.org/ns/did/v1'
                  - 'https://w3id.org/security/suites/ed25519-2020/v1'
                id: 'did:example:123456789abcdefghi'
                verificationMethod:
                  - id: 'did:example:123456789abcdefghi#keys-1'
                    type: Ed25519VerificationKey2020
                    controller: 'did:example:123456789abcdefghi'
                    publicKeyMultibase: z6MkhPCXw1tV8wR2rWqC2kF7zX9b2D9M9m3yD5rN2J2F7zW
                authentication:
                  - '#keys-1'
                service:
                  - id: 'did:example:123456789abcdefghi#didcomm-1'
                    type: DIDCommMessaging
                    serviceEndpoint: 'https://example.com/didcomm'
                    routingKeys:
                      - 'did:example:123456789abcdefghi#key-agreements-1'
                    accept:
                      - didcomm/v2
        '500':
          description: The DID Document creation failed due to an internal server error.
      operationId: get-did-json
components:
  schemas:
    DIDDocument:
      type: object
      description: |
        A DID Document is a JSON-LD document that describes a Decentralized Identifier (DID),
        including its associated public keys, authentication methods, services, and other
        relevant information. It enables trust and verifiable interactions.
      properties:
        '@context':
          type: array
          items:
            type: string
          description: |
            The JSON-LD context for the DID Document. This specifies the terms and their definitions used within the document, often including "https://www.w3.org/ns/did/v1" and other relevant contexts (e.g., for security vocabularies).
          example:
            - 'https://www.w3.org/ns/did/v1'
            - 'https://w3id.org/security/suites/jws-2020/v1'
            - 'https://w3id.org/security/suites/ed25519-2020/v1'
        id:
          type: string
          description: The Decentralized Identifier (DID) that this DID Document describes.
          pattern: '^did:[a-z0-9]+:.*$'
          example: 'did:example:123456789'
        verificationMethod:
          type: array
          items:
            $ref: '#/components/schemas/VerificationMethod'
          description: 'A set of verification methods (e.g., public keys) that can be used to verify digital signatures and other proofs made by the DID subject.'
          example:
            - id: 'did:example:123#keys-1'
              type: Ed25519VerificationKey2020
              controller: 'did:example:123'
              publicKeyMultibase: z6MkhPCXw1tV8wR2rWqC2kF7zX9b2D9M9m3yD5rN2J2F7zW
        assertionMethod:
          type: array
          items:
            oneOf:
              - type: string
                description: Reference to a verification method by its ID.
              - $ref: '#/components/schemas/VerificationMethod'
          description: |
            A set of verification methods used to assert claims about the DID subject. Can be a full `VerificationMethod` object or a string reference to one.
          example:
            - '#keys-1'
        controller:
          oneOf:
            - type: string
              description: The DID of a controller that can manage this DID Document.
            - type: array
              items:
                type: string
              description: An array of DIDs of controllers that can manage this DID Document.
          description: |
            A DID (or set of DIDs) that are authorized to manage this DID Document. If not present, the DID itself is assumed to be the controller.
          example: 'did:example:controller123'
    VerificationMethod:
      type: object
      description: |
        A verification method represents a public key or other cryptographic material that can be used for various verification purposes.
      required:
        - id
        - type
        - controller
      properties:
        id:
          type: string
          description: 'A unique identifier for the verification method within the DID Document, typically a fragment appended to the DID.'
          example: 'did:example:123#keys-1'
        type:
          type: string
          description: |
            The type of verification method, indicating the cryptographic suite. Examples include "Ed25519VerificationKey2020", "JsonWebKey2020", "Secp256k1VerificationKey2018".
          example: Ed25519VerificationKey2020
        controller:
          type: string
          description: The DID that is authorized to use this verification method.
          example: 'did:example:123'
        publicKeyMultibase:
          type: string
          description: |
            The public key expressed in Multibase format. This is a common way to encode public keys for different cryptographic curves.
          example: z6MkhPCXw1tV8wR2rWqC2kF7zX9b2D9M9m3yD5rN2J2F7zW
        publicKeyJwk:
          type: object
          description: |
            The public key expressed as a JSON Web Key (JWK) object. This is suitable for various cryptographic algorithms.
          properties:
            kty:
              type: string
              description: 'Key Type (e.g., ''OKP'' for Octet Key Pair, ''EC'' for Elliptic Curve)'
            crv:
              type: string
              description: 'Curve (e.g., ''Ed25519'', ''P-256'', ''secp256k1'')'
            x:
              type: string
              description: 'x coordinate for EC keys, or public key for OKP (Multibase encoded)'
            'y':
              type: string
              description: y coordinate for EC keys
          example:
            kty: OKP
            crv: Ed25519
            x: VCx2-2S5m0d_n0SgN84G2z2c5J1L0x0W0t0P0A0E0C0M
    VPRequestCreate:
      type: object
      required:
        - clientId
      allOf:
        - oneOf:
            - required:
                - presentationDefinitionId
            - required:
                - presentationDefinition
      properties:
        clientId:
          type: string
          description: ID of the client asking to create a new Verifiable Presentation request. This identifies the verifier application.
          example: client123
        presentationDefinitionId:
          type: string
          description: Either presentationDefinitionId or presentationDefinition should be passed. A predefined presentation definition Id so that the user does not need to pass the presentation definition.
          example: age_verification
        presentationDefinition:
          $ref: '#/components/schemas/PresentationDefinition'
          description: 'The complete presentation definition object that specifies the requirements for the verifiable presentation, including the format and content of the verifiable credentials.'
          example:
            id: age_verification
            input_descriptors:
              - id: age_credential
                format:
                  jwt_vc: {}
                constraints:
                  fields:
                    - path:
                        - $.vc.credentialSubject.age
                      filter:
                        type: number
                        minimum: 18
        transactionId:
          description: A unique id of the verifiable presentation request transaction. This is optional and will be generated on server if not passed. It is used to track the overall session.
          type: string
          example: txn_abc123
    VPRequestResponseByReference:
      type: object
      required:
        - requestUri
      properties:
        transactionId:
          description: 'A unique id of the verifiable presentation request transaction, used to correlate the entire interaction from request to result.'
          type: string
          example: 'urn:uuid:f82f281e-8d96-419b-b413-5a0459739a7b'
        requestId:
          type: string
          description: A unique id of the verifiable presentation request. It is a more specific identifier for the authorization request itself.
          example: 'urn:uuid:6d538e1b-2615-4927-bfd2-094e9f73f2a1'
        requestUri:
          description: 'The URL to fetch the verifiable presentation request, a common pattern in cross-device flows.'
          type: string
          format: uri
          example: 'https://example.com/vp-requests/6d538e1b-2615-4927-bfd2-094e9f73f2a1'
        expiresAt:
          type: integer
          format: int64
          description: Expiry of a transaction as a Unix timestamp (seconds since epoch). This indicates how long the request is valid.
          example: 1752838929
    VPRequestResponse:
      type: object
      required:
        - authorizationDetails
      properties:
        transactionId:
          description: A unique id of the verifiable presentation request transaction.
          type: string
          example: 'urn:uuid:f82f281e-8d96-419b-b413-5a0459739a7b'
        requestId:
          type: string
          description: A unique id of the verifiable presentation request.
          example: 'urn:uuid:6d538e1b-2615-4927-bfd2-094e9f73f2a1'
        authorizationDetails:
          $ref: '#/components/schemas/AuthorizationRequestResponse'
        expiresAt:
          type: integer
          description: Expiry of a transaction. Defaults to 5 minutes from creation of auth request. This is the timestamp after which the request is considered no longer active.
          example: 1752838929
    status:
      type: object
      description: Status of the verifiable presentation request transaction
      properties:
        status:
          type: string
          description: 'The current status of the verifiable presentation request transaction, indicating its state in the verification process.'
          enum:
            - ACTIVE
            - VP_SUBMITTED
            - EXPIRED
          example: ACTIVE
    verificationStatus:
      type: string
      description: 'The status of the verifiable VC verification, indicating whether the VC''s signature and integrity are valid.'
      enum:
        - SUCCESS
        - EXPIRED
        - INVALID
      example: SUCCESS
    AuthorizationResponse:
      type: object
      required:
        - vp_token
        - presentation_submission
        - state
      properties:
        vp_token:
          type: string
          description: 'vp_token - REQUIRED. JSON String or JSON object that MUST contain a single Verifiable Presentation or an array of JSON Strings and JSON objects each of them containing a Verifiable Presentations. This is the core payload submitted by the wallet. As of release 0.15.0, this can be null when there is error.'
          example: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpGVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhkV1FpT2lKb2RIUndjem92TDNabGNtbG1lUzVrWlhZeExtMXZjMmx3TG01bGRDOXlaWE53YjI1elpYTWlMQ0pqYkdGcGJYTWlPbnNpWVdkbElqb3hPSDBzSW1semN5STZJbWgwZEhCek9pOHZkbVZ5YVdaNUxtUmxkakV1Ylc5emFYQXVibVYwTDJselozSmhiblJsY25NaUxDSnVZbVlpT2pFMk9ESTVOekF3TURBc0ltVjRjQ0k2TVRjd05qazNNREF3TUgwLnNpZ25hdHVyZSJdfSwibm9uY2UiOiJub25jZV8xMjM0NSIsImF1ZCI6ImNsaWVudDEyMyJ9.signature
        state:
          type: string
          description: The requestId created for the transaction. It is used to link the authorization response back to the original request.
          example: req_6d538e1b-2615-4927-bfd2-094e9f73f2a1
        error:
          type: string
          description: The error code for the transaction sent by the wallet. It can be null when there is no error.
          example: invalid_scope
        error_description:
          type: string
          description: Optional error message for the transaction sent by the wallet. It can be null when there is no error.
          example: Something went wrong with the request configuration.
        presentation_submission:
          type: object
          description: 'As of release 0.15.0, this can be null when there is error.'
          required:
            - id
            - definition_id
            - descriptor_map
          properties:
            id:
              type: string
              description: Unique ID for mapping verifiable presentation.
              example: submission_12345
            definition_id:
              description: Unique ID for mapping verifiable presentation definition.
              type: string
              example: age_verification_1
            descriptor_map:
              type: array
              description: A structured object containing details on how the VCs in the vp_token map to the original presentation_definition. It ensures the verifier knows which credential corresponds to which requirement.
              items:
                $ref: '#/components/schemas/DescriptorMap'
              example:
                - id: age_credential
                  format: jwt_vc
                  path: '$.verifiableCredential[0]'
    DescriptorMap:
      type: object
      required:
        - id
        - format
        - path
      properties:
        id:
          type: string
          description: 'ID of the descriptor map, which links a specific submitted credential to a required input descriptor in the presentation definition.'
          example: age_credential
        format:
          type: string
          description: Format of the verifiable presentation.
          example: jwt_vc
        path:
          type: string
          description: The root path within the verifiable presentation where the credential can be found.
          example: '$.verifiableCredential[0]'
        path_nested:
          $ref: '#/components/schemas/PathNested'
          description: 'Contains nested path for each verifiable presentation, allowing for precise location of specific fields.'
          example:
            format: jwt_vc
            path: $.vc.credentialSubject.age
    PathNested:
      type: object
      description: Contains nested path for each verifiable presentation
      required:
        - format
        - path
      properties:
        format:
          type: string
          description: 'Format of the verifiable presentation, indicating the data structure.'
          example: jwt_vc
        path:
          type: string
          description: The JSONPath string of the field in the verifiable presentation.
          example: $.vc.credentialSubject.age
    AuthorizationRequestResponse:
      title: AuthorizationRequestResponse
      type: object
      properties:
        responseUri:
          type: string
          description: 'The URL for the wallet to submit the verifiable presentation, used in direct post flows.'
          format: uri
          example: 'https://injiverify.collab.mosip.net/v1/verify/vp-submission/direct-post'
        responseType:
          type: string
          description: 'The response type of the verifiable presentation, typically vp_token.'
          example: vp_token
        responseMode:
          type: string
          description: 'The response mode of the verifiable presentation submission (e.g., direct_post).'
          example: direct_post
        clientId:
          type: string
          description: The client ID of the verifier.
          example: client123
        nonce:
          type: string
          description: A cryptographic nonce used to securely bind the Verifiable Presentation(s) provided by the Wallet to the particular transaction.
          example: aShdFjAhdSFJlKasdF
        presentationDefinition:
          $ref: '#/components/schemas/PresentationDefinition'
          description: The presentation definition object that details the specific credential requirements.
          example:
            id: age_verification
            input_descriptors:
              - id: age_credential
                format:
                  jwt_vc: {}
                constraints:
                  fields:
                    - path:
                        - $.vc.credentialSubject.age
                      filter:
                        type: number
                        minimum: 18
        iat:
          type: integer
          format: unixtime
          description: 'Issued time, a Unix timestamp indicating when the request was generated.'
          example: 1752838929
    VCSubmissionRequest:
      title: VCSubmissionRequest
      type: object
      required:
        - vc
      properties:
        vc:
          type: object
          description: 'The complete Verifiable Credential to be submitted. This object contains the subject''s claims, issuer information, and cryptographic proof.'
          example:
            '@context':
              - 'https://www.w3.org/2018/credentials/v1'
            type:
              - VerifiableCredential
              - UniversityDegreeCredential
            issuer: 'did:example:7654321'
            issuanceDate: '2023-04-10T00:00:00Z'
            credentialSubject:
              id: 'did:example:1234567'
              degree:
                type: BachelorDegree
                name: Computer Science
            proof:
              type: Ed25519Signature2018
              created: '2023-04-10T00:00:00Z'
              verificationMethod: 'did:example:7654321#keys-1'
              proofPurpose: assertionMethod
              jws: eyJhbGciOiJFZERTQSJ9.eyJpYXQiOiIxNjQzMjMxNzgzIiwic3ViI...
        transactionId:
          type: string
          description: 'Optional transaction ID; if not provided, one will be generated by the server. This allows for tracking the submission.'
          example: txn_abc123
    VCSubmissionResponse:
      title: VCSubmissionResponse
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
          description: 'The unique transaction ID assigned to the VC submission, used to retrieve the result.'
          example: txn_abc123
    PresentationDefinition:
      title: PresentationDefinition
      required:
        - id
        - input_descriptors
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the presentation definition.
          example: age_verification
        input_descriptors:
          type: array
          items:
            $ref: '#/components/schemas/InputDescriptors'
          description: 'An array of objects, where each object describes a specific credential or data requirement that the verifier is requesting from the holder.'
          example:
            - id: age_credential
              name: Age Credential
              purpose: Please provide a credential that proves you are 18 or older.
              format:
                jwt_vc: {}
              constraints:
                fields:
                  - path:
                      - $.vc.credentialSubject.age
                    filter:
                      type: number
                      minimum: 18
        submission_requirements:
          type: array
          items:
            $ref: '#/components/schemas/SubmissionRequirements'
          description: 'An optional array of objects that specify how the input descriptors must be fulfilled (e.g., "all" must be submitted, or "any" of a group).'
          example:
            - id: submission_req_1
              rule: all
              count: 1
              from: 'input_descriptors[0]'
    SubmissionRequirements:
      title: SubmissionRequirements
      required:
        - id
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the submission requirement.
          example: Age Verification Submission
        rule:
          type: string
          description: 'The rule for fulfillment (e.g., ''all'' or ''any'' of the specified descriptors).'
          example: all
        count:
          type: integer
          description: The number of credentials required to satisfy the rule.
          example: 1
        from:
          type: string
          description: A pointer to the 'input_descriptors' array to which this rule applies.
          example: 'input_descriptors[0]'
    InputDescriptors:
      title: InputDescriptors
      type: object
      properties:
        id:
          type: string
          description: A unique ID for the input descriptor.
          example: age_credential
        group:
          type: array
          items:
            type: string
          description: An optional array of strings that can be used to group related input descriptors.
          example:
            - age_group_1
        format:
          type: object
          description: 'The format of the required verifiable credential (e.g., jwt_vc).'
          example:
            jwt_vc: {}
        constraints:
          type: object
          description: 'A set of rules that the verifiable credential must satisfy, such as specific field values or data types.'
          properties:
            fields:
              type: array
              items:
                type: object
                properties:
                  path:
                    type: array
                    items:
                      type: string
                    description: A JSONPath string to a specific field within the VC.
                    example:
                      - $.vc.credentialSubject.age
                  filter:
                    type: object
                    description: An object containing JSON Schema-like filter rules for the field.
                    properties:
                      type:
                        type: string
                        description: The data type of the field to be verified.
                        example: number
                      pattern:
                        type: string
                        description: A regex pattern to match the field value.
                        example: '^[0-9]{2,}$'
                      minimum:
                        type: number
                        description: The minimum allowed value for the field.
                        example: 18
    VCVerificationResult:
      title: VCVerificationResult
      type: object
      properties:
        verificationStatus:
          $ref: '#/components/schemas/verificationStatus'
          description: 'The overall status of the VC verification process, indicating if the credential passed all integrity and validity checks.'
          example: SUCCESS
    VCVerificationRequest:
      title: VCVerificationRequest
      type: object
      properties:
        vc:
          type: object
          description: The complete verifiable credential object to be verified by the server.
          example:
            '@context':
              - 'https://www.w3.org/2018/credentials/v1'
            type:
              - VerifiableCredential
              - AgeCredential
            issuer: 'did:web:example.com'
            issuanceDate: '2023-01-01T00:00:00Z'
            credentialSubject:
              id: 'did:example:123'
              age: 25
            proof:
              type: Ed25519Signature2020
              created: '2023-01-01T00:00:00Z'
              verificationMethod: 'did:web:example.com#key-1'
              proofPurpose: assertionMethod
              jws: eyJhbGciOiJFZERTQSJ9.eyJpYXQiOiIwMjMxMTIzMTIzMTMiLCJ...signature
    VpTokenResult:
      title: VpTokenResult
      type: object
      properties:
        transactionId:
          type: string
          description: The transaction ID for the VP request for which the result needs to be fetched.
          example: txn_abc123
        submissionStatus:
          type: string
          description: The overall status for the VP submission ('SUCCESS' or 'FAILED').
          enum:
            - SUCCESS
            - FAILED
          example: SUCCESS
        vcResults:
          type: array
          items:
            $ref: '#/components/schemas/VcResult'
          description: An array of verification results for each individual verifiable credential submitted.
          example:
            - vc: |
                {
                  "@context": ["https://www.w3.org/2018/credentials/v1"],
                  "type": ["VerifiableCredential", "AgeCredential"],
                  "issuer": "did:example:123",
                  "issuanceDate": "2023-01-01T00:00:00Z",
                  "credentialSubject": {
                    "id": "did:example:456",
                    "age": 25
                  },
                  "proof": {
                    "type": "Ed25519Signature2020",
                    "created": "2023-01-01T00:00:00Z",
                    "verificationMethod": "did:example:123#key-1",
                    "proofPurpose": "assertionMethod",
                    "jws": "eyJ...signature"
                  }
                }
              verificationStatus: SUCCESS
            - vc: |
                {
                  "@context": ["https://www.w3.org/2018/credentials/v1"],
                  "type": ["VerifiableCredential", "UniversityDegreeCredential"],
                  "issuer": "did:example:789",
                  "issuanceDate": "2023-04-10T00:00:00Z",
                  "credentialSubject": {
                    "id": "did:example:456",
                    "degree": {
                      "type": "BachelorDegree",
                      "name": "Computer Science"
                    }
                  },
                  "proof": {
                    "type": "Ed25519Signature2020",
                    "created": "2023-04-10T00:00:00Z",
                    "verificationMethod": "did:example:789#key-1",
                    "proofPurpose": "assertionMethod",
                    "jws": "eyJ...signature"
                  }
                }
              verificationStatus: SUCCESS
    VcResult:
      title: VcResult
      type: object
      description: A result object containing a submitted verifiable credential and its verification status.
      properties:
        vc:
          type: string
          description: The verifiable credential as a JSON string.
          example: |
            {
              "@context": ["https://www.w3.org/2018/credentials/v1"],
              "type": ["VerifiableCredential", "AgeCredential"],
              "issuer": "did:example:123",
              "issuanceDate": "2023-01-01T00:00:00Z",
              "credentialSubject": {
                "id": "did:example:456",
                "age": 25
              },
              "proof": {
                "type": "Ed25519Signature2020",
                "created": "2023-01-01T00:00:00Z",
                "verificationMethod": "did:example:123#key-1",
                "proofPurpose": "assertionMethod",
                "jws": "eyJ...signature"
              }
            }
        verificationStatus:
          $ref: '#/components/schemas/verificationStatus'
          description: The verification status of the specific VC.
          example: SUCCESS
